[{"id":"dc701a3a8e2d17c3","type":"subflow","name":"Restart Flows","info":"","category":"function","in":[{"x":40,"y":90,"wires":[{"id":"8d260f7d29088e93"}]}],"out":[],"env":[{"name":"client_id","type":"str","value":"node-red-admin","ui":{"icon":"font-awesome/fa-users","label":{"en-US":"Client ID:"},"type":"select","opts":{"opts":[{"l":{"en-US":"Admin"},"v":"node-red-admin"},{"l":{"en-US":"Editor"},"v":"node-red-editor"}]}}},{"name":"authentication","type":"bool","value":"false","ui":{"icon":"font-awesome/fa-unlock","label":{"en-US":"Authentication required"},"type":"checkbox"}},{"name":"username","type":"str","value":"","ui":{"icon":"font-awesome/fa-user-circle-o","label":{"en-US":"Username:"},"type":"input","opts":{"types":["str"]}}},{"name":"password","type":"cred","ui":{"icon":"font-awesome/fa-lock","label":{"en-US":"Password:"}}}],"meta":{"module":"restart-flows","version":"1.0.0","author":"Bruno Leonardi <b.leonardi78@gmail.com>","desc":"Riavvio di tutti i flow","keywords":"restart, flow, node, function","license":"MIT"},"credentials":{"password":""},"color":"#3FADB5","inputLabels":["Trigger"],"icon":"font-awesome/fa-refresh","status":{"x":910,"y":140,"wires":[{"id":"744b32e5f6a23ee1","port":0}]}},{"id":"e3f0c29b.15917","type":"function","z":"dc701a3a8e2d17c3","name":"Request Token","func":"const authentication = env.get('authentication')\n\nmsg = {}\nmsg.payload = {}\n\nif (authentication) {\n    const client_id = env.get('client_id')\n    const username = env.get('username')\n    const password = env.get('password')\n\n    msg.payload = {\n        \"client_id\": client_id,\n        \"grant_type\": \"password\",\n        \"scope\": \"*\",\n        \"username\": username,\n        \"password\": password\n    }\n\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Restart request with login\" })\n    return [msg, null]\n} else {\n    node.status({ fill: \"green\", shape: \"ring\", text: \"Restart request...\" })\n    return [null, msg]\n}","outputs":2,"noerr":0,"initialize":"","finalize":"","libs":[],"x":210,"y":90,"wires":[["40715257.e3114c"],["a53a26b1d877fe26"]]},{"id":"40715257.e3114c","type":"http request","z":"dc701a3a8e2d17c3","name":"Authentication","method":"POST","ret":"txt","paytoqs":"ignore","url":"http://localhost:1880/auth/token","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":450,"y":40,"wires":[["27f2916.2d1306e"]]},{"id":"27f2916.2d1306e","type":"function","z":"dc701a3a8e2d17c3","name":"Respone","func":"var status = msg.statusCode\n\nswitch (status) {\n    case 200:\n        node.log(\"Restart request...\")\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Restart request...\" })\n        let token = JSON.parse(msg.payload)\n        token = 'Bearer ' + token.access_token\n        msg = {}\n        msg.headers = { \"Authorization\": token, \"Node-RED-Deployment-Type\": \"reload\" }\n        return msg\n    case 204:\n        node.log(\"Restart request...\")\n        node.status({ fill: \"green\", shape: \"dot\", text: \"Restart request...\" })\n        msg = {}\n        msg.headers = { \"Node-RED-Deployment-Type\": \"reload\" }\n        return msg\n    case 400:\n        node.log(\"Bad request\")\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Bad request\" })\n        break\n    case 401:\n        node.log(\"Not authorized\")\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Not authorized\" })\n        break\n    case 404:\n        node.log(\"Not found\")\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Not found\" })\n        return msg\n    case 409:\n        node.log(\"Version mismatch\")\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Version mismatch\" })\n        break\n    case 500:\n        node.log(\"Server Error\")\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Server Error\" })\n        break\n    default:\n        node.log(\"Unknown Error\")\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Unknown Error\" })\n}\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: \"Ready\" })","outputs":1,"noerr":0,"initialize":"// Code added here will be run once\n// whenever the node is started.\nnode.status({ fill: \"grey\", shape: \"ring\", text: \"Initialization...\" })\nnode.status({ fill: \"blue\", shape: \"ring\", text: \"Ready\" })","finalize":"","libs":[],"x":430,"y":90,"wires":[["6573ad4d0461d1d3"]],"info":"Restart of Node-Red flows.\nWill check if the action needs security or not.\nNote: if the first 5 attemps return a statuscode 403 'forbidden'\nthen the server will break and only way to recover is then to\nrestart the service"},{"id":"cbf97372.7169f","type":"http request","z":"dc701a3a8e2d17c3","name":"Restart","method":"POST","ret":"txt","paytoqs":"ignore","url":"http://localhost:1880/flows","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":710,"y":90,"wires":[["3ce3bf47d0d5d03d"]]},{"id":"a53a26b1d877fe26","type":"http request","z":"dc701a3a8e2d17c3","name":"No authentication","method":"GET","ret":"txt","paytoqs":"ignore","url":"http://localhost:1880/auth/login","tls":"","persist":false,"proxy":"","authType":"","senderr":false,"x":460,"y":140,"wires":[["27f2916.2d1306e"]]},{"id":"bbdd1cecdbc049ea","type":"status","z":"dc701a3a8e2d17c3","name":"","scope":["27f2916.2d1306e","3ce3bf47d0d5d03d","e3f0c29b.15917"],"x":710,"y":140,"wires":[["744b32e5f6a23ee1"]]},{"id":"3ce3bf47d0d5d03d","type":"function","z":"dc701a3a8e2d17c3","name":"No success","func":"var status = msg.statusCode\n\nswitch (status) {\n    case 400:\n        node.log(\"Bad request\")\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Bad request\" })\n        break\n    case 401:\n        node.log(\"Not authorized\")\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Not authorized\" })\n        break\n    case 404:\n        node.log(\"Not found\")\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Not found\" })\n        break\n    case 409:\n        node.log(\"Version mismatch\")\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Version mismatch\" })\n        break\n    case 500:\n        node.log(\"Server Error\")\n        node.status({ fill: \"red\", shape: \"dot\", text: \"Server Error\" })\n        break\n    default:\n        node.log(\"Unknown Error\")\n        node.status({ fill: \"yellow\", shape: \"dot\", text: \"Unknown Error\" })\n}\n\nnode.status({ fill: \"blue\", shape: \"ring\", text: \"Ready\" })","outputs":0,"noerr":0,"initialize":"","finalize":"","libs":[],"x":860,"y":90,"wires":[],"info":"Restart of Node-Red flows.\nWill check if the action needs security or not.\nNote: if the first 5 attemps return a statuscode 403 'forbidden'\nthen the server will break and only way to recover is then to\nrestart the service"},{"id":"744b32e5f6a23ee1","type":"delay","z":"dc701a3a8e2d17c3","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"3","rateUnits":"second","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":false,"allowrate":false,"outputs":1,"x":805,"y":140,"wires":[[]],"l":false},{"id":"8d260f7d29088e93","type":"delay","z":"dc701a3a8e2d17c3","name":"","pauseType":"rate","timeout":"5","timeoutUnits":"seconds","rate":"1","nbRateUnits":"1","rateUnits":"minute","randomFirst":"1","randomLast":"5","randomUnits":"seconds","drop":true,"allowrate":false,"outputs":1,"x":95,"y":90,"wires":[["e3f0c29b.15917"]],"l":false},{"id":"6573ad4d0461d1d3","type":"trigger","z":"dc701a3a8e2d17c3","name":"","op1":"","op2":"","op1type":"nul","op2type":"pay","duration":"1","extend":false,"overrideDelay":false,"units":"s","reset":"","bytopic":"all","topic":"topic","outputs":1,"x":570,"y":90,"wires":[["cbf97372.7169f"]]},{"id":"7b381838b5c9c587","type":"subflow:dc701a3a8e2d17c3","z":"f5b2ee30dc10ad1d","name":"","env":[{"name":"authentication","type":"bool","value":"true"},{"name":"username","value":"admin","type":"str"},{"name":"password","type":"cred"}],"x":580,"y":390,"wires":[]}]